name:
  ndaab_api@v1_workflow(dev@v1.0.0)

on:
  push:
    branches:
      - online@v1

jobs:
  create-ecs-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  

      - name: Create ECS Repository
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecr create-repository --repository-name ${{ secrets.IMAGE_NAME }} --region ${{ secrets.AWS_REGION }} || true

  build-and-push:
      needs: create-ecs-repo
      runs-on: ubuntu-latest

      strategy:
        matrix:
          environment: [dev@v1.0.0]

      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
        IMAGE_TAG: ${{ github.sha }}
        ECS_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.IMAGE_NAME }}

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Setup AWS CLI
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Build Docker Nginx Image
          run: |
            docker-compose build
            docker tag ${{ secrets.IMAGE_NAME }}:dev@v1.0.0 ${{ secrets.IMAGE_NAME }}:dev@v1.0.0
      
        - name: Push Docker Nginx Image to ECS
          run: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.IMAGE_NAME }}
            docker push ${{ secrets.IMAGE_NAME }}:dev@v1.0.0